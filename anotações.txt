1. Criando o projeto
    # No console digitar 
    # "webapp" é o nome do projeto"
    # Não esquecer do espaço . no final para duplicar a pasta de projeto
    django-admin startproject webapp .

2. Habilitar o app /módulo polls
    # No console digitar
    # "polls" é o nome do modulo 1 do site, pode existir varios modulos
    # dependene do contexto
    django-admin startapp polls

    # No arquivo settings.py do projeto tem que habilitar o app que foi Criando
    # na lista -> 
    INSTALLED_APPS = [
                    'polls.apps.PollsConfig, # notação de pontos para navegar na estrutura de arquivos
                    .......
                    ]

3. Criar uma view para o app polls
    # criação e defição de rota baseada em um função:
    # Exemplo
    
    from django.http import HttpResponse

    # define um view baseado em função
    def index(request):
        return HttpResponse("Hello, World, Pagina Principal. Site de Enquetes")


4. Adicionar as rotas
    # Indicar qual é o caminho que as views irão usar para dar as respostas
    # Cria um arquivo urls.py dentro da pasta polls
    # cria uma lista de caminhos - "urlpatterns = [
                                        path('index', index, name="index")
                                        path('ola', ola, name="ola"),
    # Inclue no urls.py principal do projeto na lista urlpatterns.                                ]"

5. Inicializar o servidor de desenvolvimento para testes
    # py manage.py runserver

6. Criar uma template HTML

    # Arquivo do projeto settings.py na cahve de configuração de Templates
    # Adicionar a chave 'DIRS' : ['templates'],
    # cria uma pasta na raiz do projeto com o nome 'tempates'
    # dentro da pasta cria-se os arquivos HTML

view -> resposta
rotas -> caminho
template -> resposta HTML

Aula 04 - Introdução aos templates

    # Trabalhar com herança entre os templates
    - estrutura para reutilização _base.html (basico que todo mundo herda dele)
    - template de layout generico _layout1.html (base para todo o layout do sistema)
      OBS - quando usa o underline na frente significa que o template é parcial
          - Consultar Jinja2 e pagina de ducumentação de template django
    - aplicar o layout generico em um tempate final
    - arquivos estaticos - Imagens, CSS, javascript
    - usar um arquivo estaticos : favicon
        # Incluir no arquivo settings.py do projeto
        # import os # modulo de arquivos do SO        
        # Cria os arquivos estaticos configurando a segurança
            STATIC_ROOT = os.path.join(BASE_DIR, "public")
            STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

        # Comando  para criar os arquivos estaticos
            py manage.py collectstatic



    Exemplo de estrutura de uso 
        {{ var }} => imprime os valores de variaves
        {%  if var %} => para excutar comandos
        <a href=""></a>
        {% else %}
        
        {% endif %}
        {# #} => comentarios
        

======== Introdução aos models

- Introdução ao ORM e models
- Visualização de dados
python manage.py showmigrate
- Migração de dados
python manage.py migrate
- Reversão de modelos
python manage.py migrate auth 001 - Reverte até a 001
python manage.py migrate auth zero - Reverte tudo
- Criar um modelo
- Criar uma pergunta via Shell
python manage.py shell
>>> from polls.models import Question
>>> Question.objects.all() # Retorna todos os objetos do banco
<QuerySet []>
>>>from datetime import datetime # Importar o modulo de data, pois vamos precisar da data para criar uma pergunta
>>>agora = datetime.now()
>>>question1 = Question(question_text="Qual sua cor favorita?", pub_date=agora) # cria uma pergunta
>>>question1.question_text
'Qual é a sua cor favorita?'
>>>question1.id # Não mostra nada pois ainda não foi salvo no banco
>>>question1.save() # salva no banco
>>>question1.id
1
>>>quit() # fecha o shell
- Exibir dados em um template


